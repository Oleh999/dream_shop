{"version":3,"file":"checkIsExistEmail.middleware.js","sourceRoot":"","sources":["../../../src/middleware/user/checkIsExistEmail.middleware.ts"],"names":[],"mappings":";;;AACA,6CAA2C;AAC3C,yCAAwD;AAE3C,QAAA,2BAA2B,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAgC,EAAE;IAEjI,MAAM,EAAC,KAAK,EAAC,GAAG,GAAG,CAAC,IAAI,CAAC;IACzB,MAAM,WAAW,GAAG,MAAM,sBAAW,CAAC,eAAe,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;IAE/D,IAAI,WAAW,EAAE;QACf,OAAO,IAAI,CAAC,IAAI,qBAAY,CAC1B,GAAG,EACH,qBAAY,CAAC,wBAAwB,CAAC,OAAO,EAC7C,qBAAY,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC;KAChD;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC","sourcesContent":["import {NextFunction, Request, Response} from 'express';\r\nimport {userService} from '../../services';\r\nimport {customErrors, ErrorHandler} from '../../errors';\r\n\r\nexport const checkIsExistEmailMiddleware = async (req: Request, res: Response, next: NextFunction): Promise<void | NextFunction> => {\r\n\r\n  const {email} = req.body;\r\n  const userByEmail = await userService.findOneByParams({email});\r\n\r\n  if (userByEmail) {\r\n    return next(new ErrorHandler(\r\n      400,\r\n      customErrors.BAD_REQUEST_USER_PRESENT.message,\r\n      customErrors.BAD_REQUEST_USER_PRESENT.code));\r\n  }\r\n  next();\r\n};\r\n"]}