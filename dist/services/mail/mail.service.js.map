{"version":3,"file":"mail.service.js","sourceRoot":"","sources":["../../../src/services/mail/mail.service.ts"],"names":[],"mappings":";;;AAAA,kDAAkD;AAClD,yCAAyC;AACzC,6BAA6B;AAG7B,yDAAkD;AAClD,yCAAoC;AACpC,yCAA0C;AAE1C,IACE,CAAC,eAAM,CAAC,YAAY;OACf,CAAC,eAAM,CAAC,kBAAkB;OAC1B,CAAC,eAAM,CAAC,UAAU;OAClB,CAAC,eAAM,CAAC,mBAAmB,EAChC;IACA,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;CACvD;AACD,MAAM,gBAAgB,GAAG;IACvB,WAAW,EAAE,eAAM,CAAC,YAAY;CACjC,CAAC;AAEF,MAAM,WAAW,GAAG,UAAU,CAAC,eAAe,CAAC;IAC7C,OAAO,EAAE,eAAM,CAAC,kBAAkB;IAClC,IAAI,EAAE;QACJ,IAAI,EAAE,eAAM,CAAC,UAAU;QACvB,IAAI,EAAE,eAAM,CAAC,mBAAmB;KACjC;CACF,CAAC,CAAC;AAEH,MAAM,cAAc,GAAG,IAAI,cAAc,CAAC;IACxC,OAAO,EAAE,EAAE;IACX,KAAK,EAAE;QACL,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,EAAE,gBAAgB,CAAC;KAC1D;CACF,CAAC,CAAC;AAEH,MAAa,WAAW;IACtB,KAAK,CAAC,SAAS,CAAC,KAAa,EAAE,MAAkB,EAAE,UAAe,EAAE;QAClE,MAAM,YAAY,GAAG,6BAAY,CAAC,MAAM,CAAC,CAAC;QAE1C,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,IAAI,qBAAY,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;SACnD;QACD,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;QAEzC,MAAM,IAAI,GAAG,MAAM,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;QAEjF,MAAM,WAAW,CAAC,QAAQ,CAAC;YACzB,IAAI,EAAE,aAAa,eAAM,CAAC,UAAU,IAAI;YACxC,EAAE,EAAE,KAAK;YACT,OAAO,EAAE,YAAY,CAAC,OAAO;YAC7B,IAAI;SACL,CAAC,CAAC;IACL,CAAC;CACF;AAlBD,kCAkBC;AAEY,QAAA,YAAY,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import * as EmailTemplates from 'email-templates';\r\nimport * as nodemailer from 'nodemailer';\r\nimport * as path from 'path';\r\n\r\nimport {ActionEnum} from '../../constants';\r\nimport {htmlTemplate} from '../../emailTemplates';\r\nimport {config} from '../../config';\r\nimport {ErrorHandler} from '../../errors';\r\n\r\nif (\r\n  !config.FRONTEND_URL\r\n    || !config.ROOT_EMAIL_SERVICE\r\n    || !config.ROOT_EMAIL\r\n    || !config.ROOT_EMAIL_PASSWORD\r\n) {\r\n  throw new Error('email credentials are not defined!');\r\n}\r\nconst contextExtention = {\r\n  frontendUrl: config.FRONTEND_URL\r\n};\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: config.ROOT_EMAIL_SERVICE,\r\n  auth: {\r\n    user: config.ROOT_EMAIL,\r\n    pass: config.ROOT_EMAIL_PASSWORD\r\n  }\r\n});\r\n\r\nconst emailTemplates = new EmailTemplates({\r\n  message: {},\r\n  views: {\r\n    root: path.resolve(__dirname, '../../', 'emailTemplates')\r\n  }\r\n});\r\n\r\nexport class MailService {\r\n  async sendEmail(email: string, action: ActionEnum, context: any = {}): Promise<any> {\r\n    const templateInfo = htmlTemplate[action];\r\n\r\n    if (!templateInfo) {\r\n      throw new ErrorHandler(500, 'template not found');\r\n    }\r\n    Object.assign(context, contextExtention);\r\n\r\n    const html = await emailTemplates.render(templateInfo.templateFileName, context);\r\n\r\n    await transporter.sendMail({\r\n      from: `No reply <${config.ROOT_EMAIL}> `,\r\n      to: email,\r\n      subject: templateInfo.subject,\r\n      html\r\n    });\r\n  }\r\n}\r\n\r\nexport const emailService = new MailService();\r\n"]}