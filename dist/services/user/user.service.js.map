{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../../src/services/user/user.service.ts"],"names":[],"mappings":";;;AAAA,6CAAyC;AAEzC,uCAA+B;AAE/B,MAAM,WAAW;IACf,UAAU,CAAC,IAAoB;QAC7B,MAAM,YAAY,GAAG,IAAI,oBAAS,CAAC,IAAI,CAAC,CAAC;QAEzC,OAAO,YAAY,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IAED,cAAc,CAAC,EAAU,EAAE,WAAuB;QAChD,OAAO,oBAAS,CAAC,MAAM,CACrB,EAAC,GAAG,EAAE,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAC,EACzB;YACE,KAAK,EAAE;gBACL,MAAM,EAAE,WAAkB;aAC3B;SACF,CACK,CAAC;IACX,CAAC;IAED,eAAe,CAAC,UAA0B;QACxC,OAAO,oBAAS,CAAC,OAAO,CAAC,UAAU,CAAQ,CAAC;IAC9C,CAAC;CACF;AAEY,QAAA,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import {UserModel} from '../../dataBase';\r\nimport {IUser, IUserToken} from '../../models';\r\nimport {Types} from 'mongoose';\r\n\r\nclass UserService {\r\n  createUser(user: Partial<IUser>): Promise<IUser> {\r\n    const userToCreate = new UserModel(user);\r\n\r\n    return userToCreate.save();\r\n  }\r\n\r\n  addActionToken(id: string, tokenObject: IUserToken): Promise<IUser> {\r\n    return UserModel.update(\r\n      {_id: Types.ObjectId(id)},\r\n      {\r\n        $push: {\r\n          tokens: tokenObject as any\r\n        }\r\n      }\r\n    ) as any;\r\n  }\r\n\r\n  findOneByParams(findObject: Partial<IUser>): Promise<IUser>| null {\r\n    return UserModel.findOne(findObject) as any;\r\n  }\r\n}\r\n\r\nexport const userService = new UserService();\r\n"]}