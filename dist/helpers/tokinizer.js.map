{"version":3,"file":"tokinizer.js","sourceRoot":"","sources":["../../src/helpers/tokinizer.ts"],"names":[],"mappings":";;;AAAA,oCAAoC;AACpC,4CAAwC;AACxC,sCAAuC;AACvC,sCAAiC;AAEpB,QAAA,SAAS,GAAG,CAAC,MAAkB,EAAiD,EAAE;IAC7F,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,MAAM,aAAa,GAAG,EAAE,CAAC;IAEzB,QAAQ,MAAM,EAAE;QAEd,KAAK,sBAAU,CAAC,aAAa;YAC3B,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,EAAC,eAAM,CAAC,wBAAwB,EAAC,EAAC,SAAS,EAAE,eAAM,CAAC,0BAA0B,EAAC,CAAC,CAAC;YAC3G,MAAM;QAER;YACE,MAAM,IAAI,qBAAY,CAAC,GAAG,EAAC,cAAc,CAAC,CAAC;KAC9C;IAED,OAAO;QACL,YAAY;QACZ,aAAa;KACd,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as jwt from 'jsonwebtoken';\r\nimport {ActionEnum} from '../constants';\r\nimport {ErrorHandler} from '../errors';\r\nimport {config} from '../config';\r\n\r\nexport const tokinizer = (action: ActionEnum): {access_token: string, refresh_token: string} => {\r\n  let access_token = '';\r\n  const refresh_token = '';\r\n\r\n  switch (action) {\r\n\r\n    case ActionEnum.USER_REGISTER:\r\n      access_token = jwt.sign({},config.JWT_CONFIRM_EMAIL_SECRET,{expiresIn: config.JWT_CONFIRM_EMAIL_LIFETIME});\r\n      break;\r\n\r\n    default:\r\n      throw new ErrorHandler(500,'wrong action');\r\n  }\r\n\r\n  return {\r\n    access_token,\r\n    refresh_token\r\n  };\r\n};\r\n"]}